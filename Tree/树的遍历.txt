import java.util.Stack;

/**
 * Created by lenovo on 2018/7/31.
 */
class TNode{
    TNode left;
    TNode right;
    int data;
    TNode(TNode left,TNode right,int data){
        this.left=left;
        this.right=right;
        this.data=data;
    }


}
public class sort {
    public static void main(String[] args) {
        TNode t9=new TNode(null,null,9);
        TNode t8=new TNode(null,null,8);
        TNode t7=new TNode(t9,null,7);
        TNode t6=new TNode(null,null,6);
        TNode t5=new TNode(null,null,5);
        TNode t4=new TNode(null,t8,4);
        TNode t3=new TNode(t6,t7,3);
        TNode t2=new TNode(t4,t5,2);
       TNode t1=new TNode(t2,t3,1);
       /*preOrder(t1);
        System.out.println();
       midorder(t1);
        System.out.println();*/
        postOrder(t1);

    }
    //先序遍历 根左右
    public static void preOrder(TNode t){
        if (t==null){
           return ;
        }
        Stack<TNode> stack=new Stack<>();
        while(t!=null|| !stack.empty()){
            //左子树入栈
            while(t!=null){
                System.out.print(t.data+" ");
                stack.push(t);
                t=t.left;
            }
            if (!stack.empty()){
                t=stack.pop();
                t=t.right;

            }

        }
    }
    //中序遍历 左根右
    public  static  void midorder(TNode t){
        if (t==null) return;
        Stack<TNode> stack=new Stack<>();
        while(t!=null||!stack.empty()){
            while(t!=null){
                stack.push(t);
                t=t.left;
            }
            if (!stack.empty()){
                t=stack.pop();
                System.out.print(t.data+" ");
                t=t.right;
            }
        }
    }
    //后序遍历 左右根
    public static void postOrder(TNode t){
        if (t==null) return;
        Stack<TNode> stack=new Stack<>();
        //使用该栈记录stack中的元素右子树是否被访问,0为右子树未被访问,1为访问过
        Stack<Integer> flag=new Stack<>();
        while(t!=null||!stack.empty()){
            while (t!=null){
                stack.push(t);
                flag.push(0);
                t=t.left;
            }
            while (!stack.isEmpty()&&flag.peek()==1){//右子树被访问过
                flag.pop();
                t=stack.pop();
                System.out.print(t.data+"");
            }
            if (!stack.isEmpty()&&flag.peek()==0){//右子树未被访问
                flag.pop();
                flag.push(1);
                t=stack.peek();
                t=t.right;
            }

        }

    }
}
  /*  *//**
     * 前序遍历
     * 递归
     *//*
    public void preOrder(Tree.BinaryNode<AnyType> Node)
    {
        if (Node != null)
        {
            System.out.print(Node.element + " ");
            preOrder(Node.left);
            preOrder(Node.right);
        }
    }

    *//**
     * 中序遍历
     * 递归
     *//*
    public void midOrder(Tree.BinaryNode<AnyType> Node)
    {
        if (Node != null)
        {
            midOrder(Node.left);
            System.out.print(Node.element + " ");
            midOrder(Node.right);
        }
    }

    *//**
     * 后序遍历
     * 递归
     *//*
    public void posOrder(Tree.BinaryNode<AnyType> Node)
    {
        if (Node != null)
        {
            posOrder(Node.left);
            posOrder(Node.right);
            System.out.print(Node.element + " ");
        }
    }

*/